name: Xcode - Build and Package

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:  # 添加手动触发选项

jobs:
  build:
    name: Build, analyse and package
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
        run: |
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild clean build analyze -scheme "$scheme" -"$filetype_parameter" "$file_to_build" | xcpretty && exit ${PIPESTATUS[0]}
      
      # 新增构建和打包DMG的步骤
      - name: Archive App
        env:
          scheme: ${{ 'default' }}
        run: |
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          # 构建应用程序并导出
          xcodebuild -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -configuration Release -derivedDataPath build
          
      - name: Create DMG
        run: |
          # 安装create-dmg工具
          brew install create-dmg
          
          # 找到构建的.app文件
          APP_PATH=$(find ./build -name "*.app" -type d | head -n 1)
          APP_NAME=$(basename "$APP_PATH" .app)
          
          # 创建DMG文件
          create-dmg \
            --volname "$APP_NAME" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "$APP_NAME.app" 200 190 \
            --hide-extension "$APP_NAME.app" \
            --app-drop-link 600 185 \
            "$APP_NAME.dmg" \
            "$APP_PATH"
          
          # 保存APP名称供后续步骤使用
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
            
      - name: Upload DMG Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-dmg
          path: "*.dmg"

      # 创建GitHub Release
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'workflow_dispatch' || contains(github.ref, 'master')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          draft: false
          prerelease: false
          files: ${{ env.APP_NAME }}.dmg
          body: |
            自动构建的应用程序发布
            
            构建时间: ${{ github.event.repository.updated_at }}
            提交: ${{ github.sha }}
